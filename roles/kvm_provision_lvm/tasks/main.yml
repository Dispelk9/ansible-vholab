---
- name: Set distro-specific image vars
  set_fact:
    base_image_name: "{{ 'jammy-server-cloudimg-amd64.img' if target_distro == 'ubuntu' else 'debian-12-genericcloud-amd64.qcow2' }}"
    base_image_url: "{{ 'https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img' if target_distro == 'ubuntu' else 'https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2' }}"
    os_variant: "{{ 'ubuntu22.04' if target_distro == 'ubuntu' else 'debian12' }}"
    osinfo_id: "{{ 'http://ubuntu.com/ubuntu/22.04' if target_distro == 'ubuntu' else 'http://debian.org/debian/12' }}"

- name: Ensure requirements in place
  package:
    name:
      - python3-pip
      - python3-lxml
      - python3-libvirt
      - ansible
      - git
      - qemu
      - qemu-kvm
      - libvirt-clients
      - libvirt-daemon-system
      - virtinst
      - bridge-utils
    state: present
  become: true

- name: Install community.libvirt
  shell: ansible-galaxy collection install community.libvirt

- name: Install packages
  apt:
    package:
      - cloud-image-utils
    update_cache: yes

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM with multi-volume LVM-backed disks
  block:

    - name: Download base image
      get_url:
        url: "{{ base_image_url }}"
        dest: "/tmp/{{ base_image_name }}"

    - name: Create directory for {{ vm_name }}
      file:
        path: "{{ base_image_folder }}"
        state: directory

    # Define LV schema
    - name: Set VM disk layout
      set_fact:
        vm_lvm_schema:
          - { name: "{{ vm_name }}-boot", size: "{{ lvm_boot_size | default('768M') }}" }
          - { name: "{{ vm_name }}-root", size: "{{ lvm_root_size | default('10G') }}" }
          - { name: "{{ vm_name }}-srv",  size: "{{ lvm_srv_size  | default('20G') }}" }
          - { name: "{{ vm_name }}-swap", size: "{{ lvm_swap_size | default('2G') }}" }

    - name: Create logical volumes for VM
      loop: "{{ vm_lvm_schema }}"
      loop_control:
        label: "{{ item.name }}"
      command: lvcreate -L {{ item.size }} -n {{ item.name }} {{ lvm_vg_name | default('vgubuntu') }}
      become: true


    - name: Format data volumes as XFS
      loop:
        - boot
        - srv
      command: mkfs.xfs /dev/{{ lvm_vg_name }}/{{ vm_name }}-{{ item }}
      become: true

    - name: Format swap volume
      command: mkswap /dev/{{ lvm_vg_name }}/{{ vm_name }}-swap
      become: true

    # Convert cloud image into root volume
    - name: Convert cloud image to raw and write to root LV
      command: >
        qemu-img convert -O raw /tmp/{{ base_image_name }} /dev/{{ lvm_vg_name }}/{{ vm_name }}-root
      become: true

    - name: Copy cloud-init user-data template to /tmp
      template:
        src: templates/login.txt
        dest: /tmp/login.txt
        force: no
        mode: 0660

    - name: Create cloud-init disk
      shell: cloud-localds /tmp/login.img /tmp/login.txt

    - name: Copy login.img to image folder
      copy:
        src: /tmp/login.img
        dest: "{{ base_image_folder }}/login.img"
        remote_src: yes
        mode: 0660

    - name: Configure and create the VM with multiple disks
      command: >
        virt-install --name {{ vm_name }} \
        --virt-type kvm --memory {{ vm_ram_mb }} --vcpus {{ vm_vcpus }} \
        --boot hd,menu=on \
        --disk path=/dev/{{ lvm_vg_name }}/{{ vm_name }}-boot,format=raw,device=disk \
        --disk path=/dev/{{ lvm_vg_name }}/{{ vm_name }}-root,format=raw,device=disk \
        --disk path=/dev/{{ lvm_vg_name }}/{{ vm_name }}-srv,format=raw,device=disk \
        --disk path=/dev/{{ lvm_vg_name }}/{{ vm_name }}-swap,format=raw,device=disk \
        --disk path={{ base_image_folder }}/login.img,format=raw \
        --network network={{ virt_network }} \
        --graphics none \
        --os-variant {{ os_variant }}
      become: true

  when: "vm_name not in existing_vms.list_vms"


- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Clean up temporary base image
  file:
    path: "/tmp/{{ base_image_name }}"
    state: absent
  when: cleanup_tmp | default(true)

- name: Clean up temporary login files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/login.img
    - /tmp/login.txt
